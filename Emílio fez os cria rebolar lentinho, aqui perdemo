#Question 1:

class TreeNode:
    def __init__(self, val=0):
        self.val = val
        self.left = None
        self.right = None

def create_tree(nodes):
    if not nodes:   # Se a lista estiver vazia, retorna None como árvore vazia
        return None
   
    root = TreeNode(nodes[0]) # Vamos criar a raiz da árvore com o primeiro valor da lista
   
    def insert_node(root, value):
        current_node = root
        while current_node:
            if value < current_node.val: # Se o valor é menor, vai para o filho esquerdo
                if current_node.left is None:
                    current_node.left = TreeNode(value)
                    break  # Sai do loop após a inserção
                current_node = current_node.left
            elif value > current_node.val: #Se o valor é maior, vai para o filho direito
                if current_node.right is None:
                    current_node.right = TreeNode(value)
                    break  # Sai do loop após a inserção
                current_node = current_node.right
            else: #Não queremos colocar um elemento que já está na árvore
                raise ValueError('Elemento já consta na árvore') 
                          
        return root
    # Iteraremos sobre os valores restantes da lista e insere na árvore
    for n in nodes[1:]:
        if insert_node(root, n) is None:
            return None 
   
    return root
 

def is_balanced(root):
    # Função auxiliar para calcular a profundidade dos nó:
    def check(node): #Se a árvore está balanceada, retornamos 0. Se não, retornamos -1
        if node is None:
            return 0
        left_depth = check(node.left)
        if left_depth == -1:
            return -1
        right_depth = check(node.right)
        if right_depth == -1:
            return -1
        if abs(left_depth - right_depth) > 1:
            return -1
        return max(left_depth, right_depth)+1
    return check(root) != -1

#Use o exemplo abaixo, caso queira:

#print(is_balanced(create_tree([4,1, 2,3,0,5,4.5,6,7])))

#Question 2:

import random

class CustomStack:
    def __init__(self):
        self.stack = []  # Vamos começar a construir a pilha
        self.counter = 0  # Inicializa o contador para gerar índices aleatórios

    def push(self, item):  # Aqui, colocaremos ítens na pilha
        self.stack.append(item)

    def pop(self):  # Aqui olhamos um elemento da pilha (obviamente não vazia), e retiramos ele da forma a seguir: 
        if len(self.stack) == 0:
            raise IndexError("pop para uma pilha vazia")

        # Vamos escolher um índice aleatório:
        random_index = random.randint(0, len(self.stack) - 1)
        item = self.stack[random_index]
        
        # Substitui o item removido pelo último item da pilha
        self.stack[random_index] = self.stack[-1]
        self.stack.pop()  # Remove o último item
        return item
    
''''
Use o teste abaixo, caso queira:

if __name__ == "__main__":
    custom_stack = CustomStack()
    
    # Testando a operação push
    print("Pushing items 1, 2, 3, 4, 5.")
    for i in range(1, 6):
        custom_stack.push(i)

    # Testando a operação pop:
    print("Popping random item:", custom_stack.pop())
    print("Popping random item:", custom_stack.pop())
    print("Popping random item:", custom_stack.pop())
    print("Popping random item:", custom_stack.pop())
    print("Popping random item:", custom_stack.pop())
'''
    

#Question 3:

''''
    Para implementar uma árvore onde cada nó pode ter um número variável de filhos utilizando ponteiros, cada nó deve conter algumas informações fundamentais:
1. Deve haver um valor que armazena o dado representado pelo nó. 
2. É necessário um contador que indique quantos filhos o nó possui. 
    Para gerenciar esses filhos, cada nó deve ter um ponteiro para um array dinâmico que contém ponteiros para os nós filhos.Essa estrutura 
permite que o nó tenha um número variável de filhos, pois o array pode ser redimensionado conforme necessário.

    Quando se deseja adicionar um novo filho a um nó, o primeiro passo é realocar o array de filhos. Como o número de filhos é variável, 
ao adicionar um novo filho, é necessário aumentar o tamanho do array que contém os ponteiros para os filhos. Após aumentar o array, 
um novo nó deve ser criado para o filho, preenchendo suas informações, como o valor e inicializando o número de filhos. 
Em seguida, o ponteiro para o novo nó deve ser inserido na posição apropriada do array de filhos, e o contador de filhos do nó pai deve ser incrementado.

    Para percorrer a árvore em largura (breadth-first), uma estrutura chamada fila pode ser utilizada. 
    O primeiro passo é inicializar a fila para armazenar os nós que precisam ser visitados. Começa-se colocando o nó raiz na fila. 
Enquanto a fila não estiver vazia, deve-se retirar um nó da fila, processar esse nó (por exemplo, imprimindo seu valor) e, em seguida, 
adicionar todos os seus filhos à fila. 
    Esse método garante que todos os nós em cada nível da árvore sejam visitados antes de passar para o próximo nível,
proporcionando um percurso organizado da estrutura. Dessa forma, a árvore pode ser manipulada e percorrida eficientemente, 
mesmo com a variação no número de filhos por nó.
'''

#Question 4:

import numpy as np
from scipy import stats

def generate_points(n, distribution1, distribution2):

    #Vamos escolher a distribuição para o eixo x:

    if distribution1 == 'uniform':
        # Gerar amostras de uma distribuição uniforme
        x = stats.uniform.rvs(-1, 2, n)  # intervalo [-1, 1]
     
    elif distribution1 == 'normal':
        # Gerar amostras de uma distribuição normal
        x = stats.norm.rvs(0, 0.5, n)  # média 0, desvio padrão 0.5
       
    elif distribution1 == 'student_t':
        # Gerar amostras de uma distribuição t de Student com ajuste de desvio padrão
        x = stats.t.rvs(n - 1, n) * 0.5  # vamos escolher o grau de liberdade n-1 
   
    else:
        raise ValueError("Distribuição inválida. Escolha 'uniform', 'normal' ou 'student_t'.")
    
    #Vamos escolher a distribuição para o eixo y:

    if distribution2 == 'uniform':
        y = stats.uniform.rvs(-1, 2, n) # intervalo [-1, 1]
    elif distribution2 == 'normal':
        y = stats.norm.rvs(0, 0.5, n) # média 0, desvio padrão 0.5
    elif distribution2 == 'student_t':
        y = stats.t.rvs(n - 1, n) * 0.5  # graus de liberdade n-1
    else:
        raise ValueError("Distribuição inválida. Escolha 'uniform', 'normal' ou 'student_t'.")

    points = np.empty((n, 2))  # Cria um array vazio com n linhas e 2 colunas
    points[:, 0] = x  # Atribui os valores de x
    points[:, 1] = y  # Atribui os valores de y

    return points

''''
Exemplo, caso queira:

n = int(input("Digite o número de pontos a serem gerados: "))
distribution1 = input("Escolha a distribuição (uniform, normal, student_t) para o eixo x: ").strip().lower()
distribution2 = input("Escolha a distribuição (uniform, normal, student_t) para o eixo y: ").strip().lower()

points = generate_points(n, distribution1, distribution2)
print("Pontos gerados: ", points)
'''


#Question 5:

from scipy.spatial import ConvexHull

def calculate_convex_hull(points):
    hull = ConvexHull(points)  # Calcula o fecho convexo
    return points[hull.vertices]  # Retorna os pontos que pertencem ao fecho convexo

# Supondo que a função generate_points e a entrada do usuário sejam usadas anteriormente:
n = int(input("Digite o número de pontos a serem gerados: "))
distribution1 = input("Escolha a distribuição (uniform, normal, student_t): ").strip().lower()
distribution2 = input("Escolha a distribuição (uniform, normal, student_t): ").strip().lower()

''''
Use, caso queira:

points = generate_points(n, distribution1, distribution2)
print("Pontos gerados:\n", points)

convex_hull_points = calculate_convex_hull(points)
print("Pontos do fecho convexo:\n", convex_hull_points)
'''
